<?php
//date_default_timezone_set($config['other']['timezone']);
if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
}
class Logger {
    private $file;
    private $error;
	private $logDate;
	private $bindDir = ENGINE_DIR.'/cache/logs/';
	
	
    function __construct($logname) {
		$this->logDate = '['.CURRENT_DATE.'] ('.date("H:i:s").') ';
		$this->file = $this->bindDir.$logname.'.log';
    }

/*
    function WriteLine($text) {
		try {
        $fp = fopen($this->file, "a+");
        if($fp) {
            fwrite($fp,$this->logDate.$text . "\n");
        } else {
            $this->error = "Error writing logFile";
        }
        fclose($fp);
		} catch(Exception $e) {
			die('{"message": "Error in log writing - '.$e.'"}');
		}
    } */

    function Read() {
        if(file_exists($this->file)) {
            return file_get_contents($this->file);
        } else {
            $this->error = "LogFile already created";
        }
    }

    function Clear() {
        $fp = fopen($this->file,"a+");
        if($fp)
        {
            ftruncate($fp,0);
        } else {
            $this->error = "Error reading LogFile";
        }
        fclose($fp);
    }
	
	    public function log($level, $message) {
        $timestamp = CURRENT_TIME;
        $formattedMessage = "{$timestamp} [{$level}] {$message}";

        try {
            $fp = fopen($this->file, "a+");
            if ($fp) {
                fwrite($fp, $formattedMessage . PHP_EOL);
            } else {
                $this->error = "Error writing to log file: {$this->file}";
                error_log($this->error);
            }
            fclose($fp);
        } catch (Exception $e) {
            error_log('{"message": "Error writing to log file: ' . $e->getMessage() . '"}');
        }
    }

    public function logInfo($message) {
        $this->log('INFO', $message);
    }

    public function logWarn($message) {
        $this->log('WARNING', $message);
    }

    public function logError($message) {
        $this->log('ERROR', $message);
    }

}