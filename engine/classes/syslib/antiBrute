<?php
if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
}

class antiBrute {

	private $debug, $ip, $db, $maxAttempts;

	/* DB DATA */
	private $DBip, $DBid, $DBtime, $DBattempts;
	private $dbShape = "CREATE TABLE IF NOT EXISTS `antiBrute` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `time` bigint(20) DEFAULT NULL,
	  `recordTime` datetime(4) NOT NULL DEFAULT current_timestamp(4),
	  `ip` varchar(16) NOT NULL,
	  `attempts` int(11) NOT NULL DEFAULT 0,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `ip` (`ip`),
	  KEY `time` (`time`)
	) ENGINE=MyISAM DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;";
	/* DB DATA */

	/**
	 * antiBrute constructor.
	 * @param $ip
	 * @param $db
	 * @param bool $debug
	 */
	function __construct($ip, $db, $debug = false) {
		global $config;
		$this->ip = $ip;
		$this->db = $db;
		$this->debug = $debug;
		$this->maxAttempts = $config['maxLoginAttempts'];
		$this->db->run($this->dbShape);
		$this->parseIpRow();

		if($this->DBattempts >= $this->maxAttempts) {
			$this->banIp();
		}

		if ($this->DBtime !== null && $this->DBtime > CURRENT_TIME) {
			$timeLeft = $this->DBtime - CURRENT_TIME;
			functions::jsonAnswer("Перед следующей попыткой ввода подожди " . gmdate("H:i:s", $timeLeft), true);
		}

		$this->cleanup();
	}

	private function parseIpRow() {
		$query = "SELECT * FROM antiBrute WHERE ip = '".$this->ip."'";
		$data = $this->db->getRow($query);
		$this->DBip = $data['ip'] ?? null;
		$this->DBid = $data['id'] ?? null;
		$this->DBattempts = $data['attempts'] ?? 0;
		$this->DBtime = $data['time'] ?? null;

		if ($this->debug && $this->DBip !== null) {
			echo "Parsing ".$this->ip." data <br>".
			"<b>DBip: </b>".$this->DBip."<br>".
			"<b>DBid: </b>".$this->DBid."<br>".
			"<b>maxAttempts:</b> ".$this->maxAttempts."<br>".
			"<b>Auth attempts: </b>".$this->DBattempts."<br>".
			"<b>DBtime: </b>".$this->DBtime;
		}
	}

	public function failedAuth($ip) {
		if ($this->DBip === $ip) {
			$query = "UPDATE `antiBrute` SET `attempts` = attempts + 1 WHERE ip = '".$this->ip."'";
			$this->db->run($query);
		} else {
			$query = "INSERT INTO `antiBrute` (`ip`, `attempts`) VALUES ('".$this->ip."', 1)";
			$this->db->run($query);
		}
	}

	private function banIp() {
		global $config;
		if ($this->DBtime !== null && $this->DBtime > CURRENT_TIME) {
			return;
		}
		$banTime = CURRENT_TIME + $config['securitySetings']['bantime'];
		if (class_exists('Logger')) {
			$Logger = new Logger('AuthLog');
			$Logger->WriteLine('Banning '.$this->ip.' for too many authorization errors');
		}
		$query = "UPDATE `antiBrute` SET `time` = ".$banTime." WHERE ip = '".$this->ip."'";
		$this->db->run($query);
	}

	private function cleanup() {
		// Удаляем устаревшие записи
		$this->db->run("DELETE FROM antiBrute WHERE time < '".CURRENT_TIME."'");
	}

	public function clearIp($ip) {
		if ($this->DBip === $ip) {
			$this->db->run("DELETE FROM antiBrute WHERE ip = '".$ip."'");
		}
	}
}
?>