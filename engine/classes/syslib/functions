<?php
if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
}
	class functions extends init {
		
	private static $filterSymbols = array ("\x22", "\x60", "\t", '\n', '\r', "\n", "\r", '\\', ",", "¬", ";", "~", "[", "]", "{", "}", ")", "(", "*", "^", "%", "$", "<", ">", "?", "!", '"', "'", "&", '"' );
		
	public static function collectData($data, $captchaCheck = false, $acceptCheckbox = false){
	init::classUtil('ReCaptcha', "1.0.0");
	global $lang, $config;
	$collectedData = array();
	if($acceptCheckbox) {
		if(!isset($data['checkboxAccept']) || $data['checkboxAccept'] === 'false') {
			self::jsonAnswer($lang["acceptCheckbox"], true);
		}
	}
	if(is_array($data)){
			foreach($data as $key => $value){
				switch($key){

					case "g-recaptcha-response":
						if($captchaCheck && $config['securitySetings']['reCaptchaCheck']) {
							$reCaptcha = new ReCaptcha($config['securitySetings']['reCaptchaSecret']);
							$resp = $reCaptcha->verifyResponse(REMOTE_IP, $value);
							if (!$resp->success) {
								self::jsonAnswer($lang["enterCaptcha"], true);
							}
						}
					break;
					

				}
				$collectedData[$key] = self::filterString($value);
			}
		}
		return $collectedData;
	}
	
	public static function check_xss() {
		$url = html_entity_decode( urldecode( $_SERVER['QUERY_STRING'] ), ENT_QUOTES, 'ISO-8859-1' );
		$url = str_replace( "\\", "/", $url );
		
		if( $url ) {			
			if( (strpos( $url, '<' ) !== false) || (strpos( $url, '>' ) !== false) || (strpos( $url, './' ) !== false) || (strpos( $url, '../' ) !== false) || (strpos( $url, '\'' ) !== false) || (strpos( $url, '.php' ) !== false) ) {
				if( $_GET['do'] != "search" OR $_GET['subaction'] != "search" ) {
					header( "HTTP/1.1 403 Forbidden" );
					die( "Hacking attempt!" );
				}
			}
		}
		
		$url = html_entity_decode( urldecode( $_SERVER['REQUEST_URI'] ), ENT_QUOTES, 'ISO-8859-1' );
		$url = str_replace( "\\", "/", $url );
		if( $url ) {
			if( (strpos( $url, '<' ) !== false) || (strpos( $url, '>' ) !== false) || (strpos( $url, '\'' ) !== false) ) {
				if( $_GET['do'] != "search" OR $_GET['subaction'] != "search" ) {
					header( "HTTP/1.1 403 Forbidden" );
					die( "Hacking attempt!" );
				}
			}
		}
	}

	
	public static function getStrBetween($string, $start, $end)	{
		$result = array();
		$string = " ".$string;
		$offset = 0;
		while(true)
		{
			$ini = strpos($string,$start,$offset);
			if ($ini == 0)
				break;
			$ini += strlen($start);
			$len = strpos($string,$end,$ini) - $ini;
			$result[] = substr($string,$ini,$len);
			$offset = $ini+$len;
		}
		return $result;
	}
	
	public static function daysRegistered($date_reg) {
			return round((time() - $date_reg) / 86400);
	}

	public static function filterString($input){
		global $config; 
		return trim(str_replace(self::$filterSymbols,'',strip_tags(stripslashes($input))));
	}
		
	public static function getUserData($login, $data, $db){
		global $config;
		$query = "SELECT ".$data." FROM users WHERE login = '$login'";
		$selectedValue = $db->getValue($query);
		return $selectedValue;
	}
		
	public static function checkExistingData($db, $data, $order){
		$query = "SELECT * FROM users WHERE ".$data." = '".$order."'";
		$status = $db->getValue($query);
		return $status;
	}
		
	public static function checkSA($array, $SAtoCheck){
		global $lang;
		foreach($array as $key => $value){
			if(in_array($key, $SAtoCheck)) {
				if(preg_match("/[А-Яа-я]/", $value)) {
					self::jsonAnswer($lang['badSyms'].$key, true);
				}
			}
		}
	}
	
	public static function isJson($data) {
        if (!empty($data)) {
            return is_string($data) && 
              is_array(json_decode($data, true)) ? true : false;
        }
        return false;
    }

	private static function getPhrase($number, $titles){
			$cases = array(
				2,
				0,
				1,
				1,
				1,
				2
			);

			return $titles[($number % 100 > 4 && $number % 100 < 20) ? 2 : $cases[min($number % 10, 5) ]];
		}

	
	public static function showDateAgo($date){


		$stf = 0;
		$cur_time = time();
		$diff = $cur_time - $date;

		$seconds = array(
			'секунда',
			'секунды',
			'секунд'
		);
		$minutes = array(
			'минута',
			'минуты',
			'минут'
		);
		$hours = array(
			'час',
			'часа',
			'часов'
		);
		$days = array(
			'день',
			'дня',
			'дней'
		);
		$weeks = array(
			'неделя',
			'недели',
			'недель'
		);
		$months = array(
			'месяц',
			'месяца',
			'месяцев'
		);
		$years = array(
			'год',
			'года',
			'лет'
		);
		$decades = array(
			'десятилетие',
			'десятилетия',
			'десятилетий'
		);

		$phrase = array(
			$seconds,
			$minutes,
			$hours,
			$days,
			$weeks,
			$months,
			$years,
			$decades
		);
		$length = array(
			1,
			60,
			3600,
			86400,
			604800,
			2630880,
			31570560,
			315705600
		);
		for ($i = sizeof($length) - 1;($i >= 0) && (($no = $diff / $length[$i]) <= 1);$i--)
		{;
		}
		if ($i < 0)
		{
			$i = 0;
		}
		$_time = $cur_time - ($diff % $length[$i]);
		$no = floor($no);
		$value = sprintf("%d %s ", $no, self::getPhrase($no, $phrase[$i]));

		if (($stf == 1) && ($i >= 1) && (($cur_time - $_time) > 0))
		{
			$value .= time_ago($_time);
		}
		return array($value, $diff);
	}
	
	public static function uuidFromString($string) {
			$val = md5($string, true);
			$byte = array_values(unpack('C16', $val));
			 
			$tLo = ($byte[0] << 24) | ($byte[1] << 16) | ($byte[2] << 8) | $byte[3];
			$tMi = ($byte[4] << 8) | $byte[5];
			$tHi = ($byte[6] << 8) | $byte[7];
			$csLo = $byte[9];
			$csHi = $byte[8] & 0x3f | (1 << 7);
			 
			if (pack('L', 0x6162797A) == pack('N', 0x6162797A)) {
				$tLo = (($tLo & 0x000000ff) << 24) | (($tLo & 0x0000ff00) << 8) | (($tLo & 0x00ff0000) >> 8) | (($tLo & 0xff000000) >> 24);
				$tMi = (($tMi & 0x00ff) << 8) | (($tMi & 0xff00) >> 8);
				$tHi = (($tHi & 0x00ff) << 8) | (($tHi & 0xff00) >> 8);
			}
			 
			$tHi &= 0x0fff;
			$tHi |= (3 << 12);
			   
			$uuid = sprintf(
				'%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x',
				$tLo, $tMi, $tHi, $csHi, $csLo,
				$byte[10], $byte[11], $byte[12], $byte[13], $byte[14], $byte[15]
			);
			return $uuid;
	}
	
	
		
	public static function FoxesStrlen($value, $charset = "utf-8"){
		if (strtolower($charset) == "utf-8") {
			if (function_exists('mb_strlen')) {
				return mb_strlen($value, "utf-8");
			} elseif (function_exists('iconv_strlen')) {
				return iconv_strlen($value, "utf-8");
			}
		}

		return strlen($value);
	}
		
	public function FoxesStrrpos($str, $needle, $charset){
		if (strtolower($charset) == "utf-8") {
			if (function_exists('mb_strrpos')) {
				return mb_strrpos($str, $needle, null, "utf-8");
			} elseif (function_exists('iconv_strrpos')) {
				return iconv_strrpos($str, $needle, "utf-8");
			}
		}
		return strrpos($str, $needle);

	}
		
	public static function totranslit($var, $lower = true, $punkt = true){
			global $langtranslit;

			if (is_array($var)) return "";

			$var = str_replace(chr(0) , '', $var);

			if (!is_array($langtranslit) or !count($langtranslit)){
				$var = trim(strip_tags($var));

				if ($punkt) $var = preg_replace("/[^a-z0-9\_\-.]+/mi", "", $var);
				else $var = preg_replace("/[^a-z0-9\_\-]+/mi", "", $var);

				$var = preg_replace('#[.]+#i', '.', $var);
				$var = str_ireplace(".php", ".ppp", $var);

				if ($lower) $var = strtolower($var);

				return $var;
			}

			$var = trim(strip_tags($var));
			$var = preg_replace("/\s+/ms", "-", $var);
			$var = str_replace("/", "-", $var);

			$var = strtr($var, $langtranslit);

			if ($punkt) $var = preg_replace("/[^a-z0-9\_\-.]+/mi", "", $var);
			else $var = preg_replace("/[^a-z0-9\_\-]+/mi", "", $var);

			$var = preg_replace('#[\-]+#i', '-', $var);
			$var = preg_replace('#[.]+#i', '.', $var);

			if ($lower) $var = strtolower($var);

			$var = str_ireplace(".php", "", $var);
			$var = str_ireplace(".php", ".ppp", $var);

			if (strlen($var) > 200){
				$var = substr($var, 0, 200);
				if (($temp_max = strrpos($var, '-'))) $var = substr($var, 0, $temp_max);
			}

			return $var;
		}
			
		public static function translit($value){
			if(preg_match("/[А-Яа-я]/", $value)) {
				$converter = array(
					'а' => 'a',    'б' => 'b',    'в' => 'v',    'г' => 'g',    'д' => 'd',
					'е' => 'e',    'ё' => 'e',    'ж' => 'zh',   'з' => 'z',    'и' => 'i',
					'й' => 'y',    'к' => 'k',    'л' => 'l',    'м' => 'm',    'н' => 'n',
					'о' => 'o',    'п' => 'p',    'р' => 'r',    'с' => 's',    'т' => 't',
					'у' => 'u',    'ф' => 'f',    'х' => 'h',    'ц' => 'c',    'ч' => 'ch',
					'ш' => 'sh',   'щ' => 'sch',  'ь' => '',     'ы' => 'y',    'ъ' => '',
					'э' => 'e',    'ю' => 'yu',   'я' => 'ya',
				 
					'А' => 'A',    'Б' => 'B',    'В' => 'V',    'Г' => 'G',    'Д' => 'D',
					'Е' => 'E',    'Ё' => 'E',    'Ж' => 'Zh',   'З' => 'Z',    'И' => 'I',
					'Й' => 'Y',    'К' => 'K',    'Л' => 'L',    'М' => 'M',    'Н' => 'N',
					'О' => 'O',    'П' => 'P',    'Р' => 'R',    'С' => 'S',    'Т' => 'T',
					'У' => 'U',    'Ф' => 'F',    'Х' => 'H',    'Ц' => 'C',    'Ч' => 'Ch',
					'Ш' => 'Sh',   'Щ' => 'Sch',  'Ь' => '',     'Ы' => 'Y',    'Ъ' => '',
					'Э' => 'E',    'Ю' => 'Yu',   'Я' => 'Ya',
				);
				$value = strtr($value, $converter);
			}
			return $value;
		}
			
		public static function jsonAnswer($answer, $status = true){
			$type = 'error';
			$response = '';
			switch($status){
				case true:
					$type = 'error';
				break;
				
				case false:
					$type = 'success';
				break;

			}
			$response = '{"message": "'.$answer.'", "type": "'.$type.'"}';			
			die($response);
		}
		
		public static function userExists($user, $db){
			$query = "SELECT * FROM `users` WHERE login = '".$user."'";
			return $db->getRow($query);
		}
	
	}