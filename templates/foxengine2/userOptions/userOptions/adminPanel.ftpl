 <useroption> { 
	"optionTitle": "Админ панель",
	"description": "Панель управления FoxesCraft",
	"optionBlock": "#usrMenu",
	"optionPreText": "<i style='color: #d8e815' class='fa fa-bolt'></i>",
	"optionGroup": 1, 
	"optionClass": "dropdown-item",
	"langPack": "adminPanel",
	"type": "page" 
	} 
</useroption>
 <pageContent>
<script type="module" src="/plugins/AdminTools-1.0.0/js/AdminPanel.js"></script>
<div class="adminPanel">
    <div class="main-panel">
        <div class="content-wrapper">
            <div class="row" id="admOptions">
                <h3>%lang|adminOptions%</h3>
            </div>
            <div class="row">
                <div class="grid-margin" id="adminContent"></div>
            </div>
			<div class="logWrapper">
				<ul class="inline">
					<li>
						<input type="number" id="linesNum" class="form-control" value="20" placeholder="Строки">
					</li>
					<li>
						<select id="logName" class="form-control">
							<option value="lastlog">lastlog</option>
							<option value="error">errorlog</option>
							<option value="access">accesslog</option>
						</select>
					</li>
				</ul>
				
				<div class="logger" id="logs"></div>
				<div id="loading" class="loading-spinner" style="display:none;"></div>
				<button id="toggleLogging" class="btn btn-primary">Остановить обновление</button>
			</div>

        </div>
    </div>
</div>


<script>
const logsContainer = document.getElementById('logs');
const toggleLoggingButton = document.getElementById('toggleLogging');
let intervalId;
let isLoggingActive = true;

toggleLoggingButton.addEventListener('click', () => {
    if (isLoggingActive) {
        clearInterval(intervalId);
        toggleLoggingButton.textContent = 'Запустить обновление';
    } else {
        intervalId = setInterval(fetchLogs, 2000);
        toggleLoggingButton.textContent = 'Остановить обновление';
    }
    isLoggingActive = !isLoggingActive;
});

function initializeLogging() {
    if (document.getElementById('logs') && document.getElementById('linesNum')) {
        fetchLogs();
        logsContainer.classList.add('fade-in');
        intervalId = setInterval(fetchLogs, 2000);
    } else {
        setTimeout(initializeLogging, 100); 
    }
}

async function fetchLogs() {
    const fileName = document.getElementById('logName').value;
    const loadingElement = document.getElementById('loading');
    const logsElement = document.getElementById('logs');
    
    loadingElement.style.display = 'block';

    try {
        const response = await foxEngine.sendPostAndGetAnswer({ admPanel: "log", file: fileName, lines: document.getElementById('linesNum').value }, "TEXT");
        logsElement.innerHTML = formatLogs(response);
        // animateLogs(); // если вам нужно, чтобы это работало
    } catch (error) {
        logsElement.innerHTML = '<div class="error">Error fetching logs: ' + error.message + '</div>';
    } finally {
        loadingElement.style.display = 'none';
    }
}

function formatLogs(logs) {
    const lines = logs.split('\n');
    let formattedLogs = '';

    lines.forEach(line => {
        formattedLogs += line
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\[(\d{2}\.\d{2}\.\d{4})\]/g, '<span class="timestamp">[$1]</span>')
            .replace(/\((\d{2}:\d{2}:\d{2})\)/g, '<span class="time">($1)</span>')
            .replace(/(user\d+)/g, '<span class="username">$&</span>')
            .replace(/from (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/g, 'from <span class="ip-address">$1</span>')
            .replace(/\/\*([\s\S]*?)\*\//g, '<span class="special-format">/*$1*/</span>')
			.replace(/<b>(.*?)<\/b>/g, '<b>$1</b>') + '<br>';
    });

    return formattedLogs;
}

function animateLogs() {
    setTimeout(() => {
        logsContainer.scrollTop = logsContainer.scrollHeight;
    }, 1000);
}

(function() {
    initializeLogging();
})();

    </script>

<script>
(async function() {
    const admOptions = ["settings", "users",  "servers"]; //"pages", "modules", "groupAssoc", "templateEditor"
    const blockTpl = await foxEngine.loadTemplate(foxEngine.elementsDir + 'admin/panel.tpl', false);
    admOptions.forEach(async (option, index) => {
        let panelBlock = await foxEngine.replaceTextInTemplate(blockTpl, {
            option: option
        });
        $("#admOptions").append(await foxEngine.entryReplacer.replaceText(panelBlock));
        
        if ((index + 1) % 2 === 0 || index === admOptions.length - 1) {
            //$("#admOptions").append('<div class="w-100"></div>');
        }
    });
})();    
</script>
 </pageContent>