 <useroption> { 
	"optionTitle": "Админ панель",
	"description": "Панель управления FoxesCraft",
	"optionBlock": "#usrMenu",
	"optionPreText": "<i style='color: #d8e815' class='fa fa-bolt'></i>",
	"optionGroup": 1, 
	"optionClass": "dropdown-item",
	"langPack": "adminPanel",
	"type": "page" 
	} 
</useroption>
 <pageContent>
     <script type="module" src="/plugins/AdminTools-1.0.0/js/AdminPanel.js"></script>
<div class="adminPanel">
    <div class="main-panel">
        <div class="content-wrapper">
            <div class="row" id="admOptions">
                <h3>%lang|adminOptions%</h3>
            </div>
            <div class="row">
                <div class="col-md-12 grid-margin" id="adminContent"></div>
            </div>
            <input type="number" id="linesNum" class="form-control" value="20" />
            <div class="logger" id="logs"></div>
            <div id="loading" class="loading-spinner" style="display:none;"></div>
        </div>
    </div>
</div>


    <script>
		fetchLogs();
        setInterval(fetchLogs, 2000);

        async function fetchLogs() {
            const fileName = "lastlog"; // Имя файла для загрузки
            //$('#loading').show(); // Показываем индикатор загрузки

            try {
                let logs = await foxEngine.sendPostAndGetAnswer({ admPanel: "log", file: fileName, lines: $("#linesNum").val() }, "TEXT");
                $('#logs').html(formatLogs(logs));
            } catch (error) {
                $('#logs').html('<div class="error">Error fetching logs: ' + error.message + '</div>');
            } finally {
                //$('#loading').hide();
            }
        }

function formatLogs(logs) {
    const lines = logs.split('\n');
    let formattedLogs = '';
    let currentDate = '';

    lines.forEach(line => {
        const dateMatch = line.match(/\[(\d{2}\.\d{2}\.\d{4})\]/);
        if (dateMatch) {
            const newDate = dateMatch[1];
            if (currentDate && currentDate !== newDate) {
                formattedLogs += '<div class="new-date"></div>';
            }
            currentDate = newDate;
        }

        formattedLogs += line
            .replace(/\[(\d{2}\.\d{2}\.\d{4})\]/g, '<span class="timestamp">[$1]</span>')
            .replace(/\((\d{2}:\d{2}:\d{2})\)/g, '<span class="time">($1)</span>')
            .replace(/(user\d+)/g, '<span class="username">$&</span>')
            .replace(/from (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/g, 'from <span class="ip-address">$1</span>')
            .replace(/successfully authorized/g, '<span class="action">successfully authorized</span>') + '<br>';
    });

    return formattedLogs;
}

function animateLogs() {
    const logsContainer = document.getElementById('logs');
    logsContainer.classList.add('fade-in');
    setTimeout(() => logsContainer.classList.remove('fade-in'), 1000);
}

    </script>

<script>
(async function() {
    const admOptions = ["settings", "users",  "servers"]; //"pages", "modules", "groupAssoc", "templateEditor"
    const blockTpl = await foxEngine.loadTemplate(foxEngine.elementsDir + 'admin/panel.tpl', false);
    admOptions.forEach(async (option, index) => {
        let panelBlock = await foxEngine.replaceTextInTemplate(blockTpl, {
            option: option
        });
        $("#admOptions").append(await foxEngine.entryReplacer.replaceText(panelBlock));
        
        if ((index + 1) % 2 === 0 || index === admOptions.length - 1) {
            //$("#admOptions").append('<div class="w-100"></div>');
        }
    });
})();    
</script>
 </pageContent>