 <useroption> { 
	"optionTitle": "Админ панель",
	"description": "Панель управления FoxesCraft",
	"optionBlock": "#usrMenu",
	"optionPreText": "<i style='color: #d18249' class='fa fa-bolt'></i>",
	"optionGroup": 1, 
	"optionClass": "dropdown-item",
	"langPack": "adminPanel",
	"type": "page" 
	} 
</useroption>
 <pageContent>
<script type="module" src="/plugins/AdminTools-1.0.0/js/AdminPanel.js"></script>
<div class="adminPanel">
    <div class="main-panel">
        <div class="content-wrapper">
            <div class="row" id="admOptions">
                <h3>%lang|adminOptions%</h3>
            </div>
            <div class="row">
                <div class="grid-margin" id="adminContent"></div>
            </div>
			
			
	<div class="tabs-box">
	   <ul class="tab_caption">
		  <li class="profileSettings active" value="profile">Статистика</li>
		  <li class="personalisation">Логи</li>
		  <li class="security">Переменные среды</li>
	   </ul>
   
     <div class="tab_content active">
		<div class="row" id="engineInfo" style="margin: 15px; border: 1px solid black;padding: 15px;">
			<ul>
				<li>Всего пользователей: <b id="totalUsers"></b></li>
				<li>Авторизаций за последний день: <b id="loginCount"></b></li>
				<li></li>
				<li></li>
			</ul>
		</div>
	 </div>

     <div class="tab_content">
		<div class="logWrapper">
				<ul class="inline">
					<li>
						<input type="number" id="linesNum" class="form-control" value="20" placeholder="Строки">
					</li>
					<li>
						<select id="logName" class="form-control">
							<option value="lastlog">lastlog</option>
							<option value="error">errorlog</option>
							<option value="access">accesslog</option>
						</select>
					</li>
				</ul>
				
				<div class="logger" id="logs"></div>
				<div id="loading" class="loading-spinner" style="display:none;"></div>
				<button id="toggleLogging" class="btn btn-primary">Остановить обновление</button>
			</div>
	 </div>

     <div class="tab_content">
		 <div>			
			<div class="alert alert-warning" role="alert">
			 Внимание!!! <br />
			 <small>Это временное решение, да - неудобно, зато действенно!</small>
			</div>
			<div class="buttonGroup">	
				<button type="button" class="btn btn-success" onclick="adminPanel.editInfoBox.openEditWindow()">БлокИнфо</button>
				<button type="button" class="btn btn-success" onclick="adminPanel.editAllBadges.openEditWindow()">Все бейджи</button>
				<button type="button" class="btn btn-success" onclick="adminPanel.groupAssoc.openEditWindow()">Группы</button>
			</div>
		 </div>
	 </div>
    </div>
</div>

<script>
const logsContainer = document.getElementById('logs');
const toggleLoggingButton = document.getElementById('toggleLogging');
let intervalId;
let isLoggingActive = true;
let usersInfo = [];

toggleLoggingButton.addEventListener('click', () => {
    if (isLoggingActive) {
        clearInterval(intervalId);
        toggleLoggingButton.textContent = 'Запустить обновление';
    } else {
        intervalId = setInterval(fetchLogs, 2000);
        toggleLoggingButton.textContent = 'Остановить обновление';
    }
    isLoggingActive = !isLoggingActive;
});

function initializeLogging() {
    if (document.getElementById('logs') && document.getElementById('linesNum')) {
        fetchLogs();
        logsContainer.classList.add('fade-in');
        intervalId = setInterval(fetchLogs, 2000);
    } else {
        setTimeout(initializeLogging, 100); 
    }
}

async function fetchLogs() {
    const fileName = document.getElementById('logName').value;
    const loadingElement = document.getElementById('loading');
    const logsElement = document.getElementById('logs');
    
    loadingElement.style.display = 'block';

    try {
        const response = await foxEngine.sendPostAndGetAnswer({ admPanel: "log", file: fileName, lines: document.getElementById('linesNum').value }, "TEXT");
        logsElement.innerHTML = formatLogs(response);
        // animateLogs(); // если вам нужно, чтобы это работало
    } catch (error) {
        logsElement.innerHTML = '<div class="error">Error fetching logs: ' + error.message + '</div>';
    } finally {
        loadingElement.style.display = 'none';
    }
}

function formatLogs(logs) {
    const lines = logs.split('\n');
    let formattedLogs = '';

    lines.forEach(line => {
        formattedLogs += line
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\[(\d{2}\.\d{2}\.\d{4})\]/g, '<span class="timestamp">[$1]</span>')
            .replace(/\((\d{2}:\d{2}:\d{2})\)/g, '<span class="time">($1)</span>')
            .replace(/(user\d+)/g, '<span class="username">$&</span>')
            .replace(/from (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/g, 'from <span class="ip-address">$1</span>')
            .replace(/\/\*([\s\S]*?)\*\//g, '<span class="special-format">/*$1*/</span>')
			.replace(/<b>(.*?)<\/b>/g, '<b>$1</b>')
			.replace(/\[INFO\]/g, '<span class="logLevel">[<span class="info">INFO</span>]</span>') // Уровень логов: INFO
            .replace(/\[WARN\]/g, '<span class="logLevel">[<span class="warn">WARN</span>]</span>') // Уровень логов: WARN
            .replace(/\[ERROR\]/g, '<span class="logLevel">[<span class="error">ERROR</span>]</span>') // Уровень логов: ERROR
			.replace(/\[DEBUG\]/g, '<span class="logLevel">[<span class="debug">DEBUG</span>]</span>') // Уровень логов: DEBUG
			+ '<br>';
    });

    return formattedLogs;
}

function animateLogs() {
    setTimeout(() => {
        logsContainer.scrollTop = logsContainer.scrollHeight;
    }, 1000);
}

(function() {
    initializeLogging();
})();


(async function () {
    const admOptions = [
        { name: "settings" },
        { name: "users", loadAfter: true, classStyle: "updated-block" },
        { name: "servers", requiresAuth: true, classStyle: "warning-block" }
        // { name: "modules", category: "advanced" },
        // { name: "templateEditor", experimental: true }
    ];

    const blockTpl = foxEngine.templateCache["adminPanel"];

    for (let index = 0; index < admOptions.length; index++) {
        const optionObj = admOptions[index];
        const optionName = optionObj.name;

        let panelBlock = await foxEngine.replaceTextInTemplate(blockTpl, {
            option: optionName,
            ...optionObj // можно использовать доп. параметры внутри шаблона
        });

        $("#admOptions").append(await foxEngine.entryReplacer.replaceText(panelBlock));

        if ((index + 1) % 2 === 0 || index === admOptions.length - 1) {
            //$("#admOptions").append('<div class="w-100"></div>');
        }

        // Выполняем дополнительные действия на основе параметров
        if (optionObj.loadAfter && optionName === "users") {
            await selectUsers();
        }
    }
})();


async function selectUsers(){
	let usersInfo = [];
	let countRecentLogins = 0;
	let totalUsers = 0;
	const currentTime = Date.now();
		let users = await foxEngine.sendPostAndGetAnswer({
		"admPanel": "selectUsers",
		"login": foxEngine.replaceData.login
			}, "JSON");
			
	const time24HoursAgo = currentTime - 24 * 60 * 60 * 1000;

	users.forEach(user => {
	  const lastLogin = parseInt(user.last_date) * 1000;

	  if (lastLogin > time24HoursAgo) {
		countRecentLogins++;
	  }
	  totalUsers++;
	});
	$("#totalUsers").html(totalUsers);
	$("#loginCount").html(countRecentLogins);;
	return usersInfo;
}

    const tabButtons = document.querySelectorAll(".tab_caption li");
    const tabContents = document.querySelectorAll(".tab_content");

    tabButtons.forEach((btn, index) => {
        btn.addEventListener("click", () => {
            // Убираем активные классы у всех кнопок и контента
            tabButtons.forEach(el => el.classList.remove("active"));
            tabContents.forEach(el => el.classList.remove("active"));

            // Добавляем активный класс текущему табу и контенту
            btn.classList.add("active");
            if (tabContents[index]) {
                tabContents[index].classList.add("active");
            }
        });
    });

</script>
 </pageContent>