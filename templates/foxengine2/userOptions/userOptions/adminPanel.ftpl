 <useroption> { 
	"optionTitle": "Админ панель",
	"description": "Панель управления FoxesCraft",
	"optionBlock": "#usrMenu",
	"optionPreText": "<i style='color: #d18249' class='fa fa-bolt'></i>",
	"optionGroup": 1, 
	"optionClass": "dropdown-item",
	"langPack": "adminPanel",
	"type": "page" 
	} 
</useroption>
 <pageContent>
<script type="module" src="/plugins/AdminTools-1.0.0/js/AdminPanel.js"></script>
<div class="adminPanel">
    <div class="main-panel">
        <div class="content-wrapper">
            <div class="row" id="admOptions">
                <h3>%lang|adminOptions%</h3>
            </div>
            <div class="row">
                <div class="grid-margin" id="adminContent"></div>
            </div>
			
			
	<div class="tabs-box">
	   <ul class="tab_caption">
		  <li class="profileSettings active" value="profile">Статистика</li>
		  <li class="personalisation">Логи</li>
		  <li class="security">Переменные среды</li>
	   </ul>
   
     <div class="tab_content active">
		<div class="row" id="engineInfo" style="margin: 15px; border: 1px solid black;padding: 15px;">
			<ul>
				<li>Всего пользователей: <b id="totalUsers"></b></li>
				<li>Авторизаций за последний день: <b id="loginCount"></b></li>
				<li></li>
				<li></li>
			</ul>
		</div>
	 </div>

     <div class="tab_content">
		<div class="logWrapper">
				<ul class="inline">
					<li>
						<input type="number" id="linesNum" class="form-control" value="20" placeholder="Строки">
					</li>
					<li>
						<select id="logName" class="form-control">
							<option value="lastlog">lastlog</option>
							<option value="error">errorlog</option>
							<option value="access">accesslog</option>
						</select>
					</li>
					
					<li>
						<button id="deleteLogFileButt" class="btn bg-orange-800 btn-sm btn-raised position-left legitRipple"><i class="fa-thin fa-trash"></i></button>
					</li>
				</ul>
				
				<div class="logger" id="logs"></div>
				<div id="loading" class="loading-spinner" style="display:none;"></div>
				<button id="toggleLogging" class="btn btn-primary">Остановить обновление</button>
			</div>
	 </div>

     <div class="tab_content">
		 <div>			
			<div class="alert alert-warning" role="alert">
			 Внимание!!! <br />
			 <small>Это временное решение, да - неудобно, зато действенно!</small>
			</div>
			<div class="buttonGroup">	
				<button type="button" class="btn btn-success" onclick="adminPanel.editInfoBox.openEditWindow()">БлокИнфо</button>
				<button type="button" class="btn btn-success" onclick="adminPanel.editAllBadges.openEditWindow()">Все бейджи</button>
				<button type="button" class="btn btn-success" onclick="adminPanel.groupAssoc.openEditWindow()">Группы</button>
			</div>
		 </div>
	 </div>
    </div>
	
<div class="hardware-stats">
  <h2 class="hardware-title">Статистика железа</h2>
  <div class="row">
    <div class="chart-wrapper">
      <div class="chart-title">Процессоры</div>
      <canvas id="cpuPieChart"></canvas>
    </div>
    <div class="chart-wrapper">
      <div class="chart-title">Видеокарты</div>
      <canvas id="gpuPieChart"></canvas>
    </div>
  </div>
  <!--
  <div class="total-users">
    Всего пользователей: <span id="totalUsers">0</span>
  </div> -->
</div>


</div>
</div>



<script>
(() => {
    const logsContainer = document.getElementById('logs');
    const linesInput = document.getElementById('linesNum');
    const logNameInput = document.getElementById('logName');
    const loadingElement = document.getElementById('loading');
    const toggleBtn = document.getElementById('toggleLogging');
    const deleteBtn = document.getElementById('deleteLogFileButt');
    let intervalId;
    let isLogging = true;

const patterns = [
  { regex: /\*\*(.*?)\*\*/g, replacement: '<strong>$1</strong>' },
  { regex: /\[(\d{2}\.\d{2}\.\d{4})\]/g, replacement: '<span class="timestamp">[$1]</span>' },
  { regex: /\((\d{2}:\d{2}:\d{2})\)/g, replacement: '<span class="time">($1)</span>' },
  { regex: /(user\d+)/g, replacement: '<span class="username">$1</span>' },
  { regex: /from (\d{1,3}(?:\.\d{1,3}){3})/g, replacement: 'from <span class="ip-address">$1</span>' },
  { regex: /\/\*([\s\S]*?)\*\//g, replacement: '<span class="special-format">/*$1*/</span>' },
  { regex: /<b>(.*?)<\/b>/g, replacement: '<b>$1</b>' },
  { regex: /\[INFO\]/g,  replacement: '<span class="logLevel">[<span class="info">INFO</span>]</span>' },
  { regex: /\[WARN\]/g,  replacement: '<span class="logLevel">[<span class="warn">WARN</span>]</span>' },
  { regex: /\[ERROR\]/g, replacement: '<span class="logLevel">[<span class="error">ERROR</span>]</span>' },
  { regex: /\[DEBUG\]/g, replacement: '<span class="logLevel">[<span class="debug">DEBUG</span>]</span>' }
];

function formatLogLine(line) {
  return patterns.reduce(
    (formatted, { regex, replacement }) => formatted.replace(regex, replacement),
    line
  ) + '<br>';
}

const formatLogs = logs => 
  logs
    .split('\n')
    .map(formatLogLine)
    .join('');


    const fetchLogs = async () => {
        const file = logNameInput.value.trim();
        if (!file) return;
        loadingElement.style.display = 'block';
        try {
            const text = await foxEngine.sendPostAndGetAnswer(
                { admPanel: 'log', file, lines: linesInput.value },
                'TEXT'
            );
            logsContainer.innerHTML = formatLogs(text);
            setTimeout(() => {
                logsContainer.scrollTop = logsContainer.scrollHeight;
            }, 1000);
        } catch (e) {
            logsContainer.innerHTML = '<div class="error">Error: ' +e.message +'</div>';
        } finally {
            loadingElement.style.display = 'none';
        }
    };

    const clearLogFile = async () => {
        const file = logNameInput.value.trim();
        if (!file) {
            alert('Укажите имя лог-файла.');
            return;
        }
        if (!confirm(`Удалить "${file}.log"? Это действие нельзя отменить.`)) return;
        try {
            const res = await foxEngine.sendPostAndGetAnswer(
                { admPanel: 'deleteLogFile', file },
                'JSON'
            );
            if (res.deleted) {
                alert(`"${file}.log" очищен.`);
            } else if (res.message) {
                $('#deleteLogFileButt').notify(res.message, res.type);
            }
        } catch (e) {
            console.error(e);
            alert('Ошибка при удалении лог‑файла.');
        }
    };

    deleteBtn.addEventListener('click', clearLogFile);

    toggleBtn.addEventListener('click', () => {
        if (isLogging) {
            clearInterval(intervalId);
            toggleBtn.textContent = 'Запустить обновление';
        } else {
            intervalId = setInterval(fetchLogs, 2000);
            toggleBtn.textContent = 'Остановить обновление';
        }
        isLogging = !isLogging;
    });

    const initialize = () => {
        if (logsContainer && linesInput && logNameInput) {
            fetchLogs();
            logsContainer.classList.add('fade-in');
            intervalId = setInterval(fetchLogs, 2000);
        } else {
            setTimeout(initialize, 100);
        }
    };

    initialize();

    (async () => {
        const admOptions = [
            { name: "settings" },
            { name: "users", loadAfter: true, classStyle: "updated-block" },
            { name: "servers", requiresAuth: true, classStyle: "warning-block" }
        ];
        const blockTpl = foxEngine.templateCache["adminPanel"];
        for (let i = 0; i < admOptions.length; i++) {
            const opt = admOptions[i];
            const panel = await foxEngine.replaceTextInTemplate(blockTpl, { option: opt.name, ...opt });
            $("#admOptions").append(await foxEngine.entryReplacer.replaceText(panel));
            if (opt.loadAfter && opt.name === "users") selectUsers();
        }
    })();

    const selectUsers = async () => {
        const now = Date.now();
        const users = await foxEngine.sendPostAndGetAnswer(
            { admPanel: "selectUsers", login: foxEngine.replaceData.login },
            "JSON"
        );
        const since = now - 24 * 60 * 60 * 1000;
        const recent = users.filter(u => parseInt(u.last_date, 10) * 1000 > since).length;
        $("#totalUsers").html(users.length);
        $("#loginCount").html(recent);
    };

    document.querySelectorAll(".tab_caption li").forEach((btn, idx) => {
        btn.addEventListener("click", () => {
            document.querySelectorAll(".tab_caption li, .tab_content").forEach(el => el.classList.remove("active"));
            btn.classList.add("active");
            document.querySelectorAll(".tab_content")[idx]?.classList.add("active");
        });
    });
})();
</script>

 </pageContent>