class FetchRequest {
  constructor(path, args, timeDelay) {
    this.path = path;
    this.args = args;
    this.timeDelay = timeDelay;
    this.timeDelayTime = 0;
    this.timeDelayMaxCount = 3;
    this.timeDelayCount = 0;
  }

  async sendPost(params, after, antiTimeDelay) {
    let response = "notSent";

    if (this.timeDelay !== false && antiTimeDelay === true /*&& this.timeDelayCount++ === this.timeDelayMaxCount*/) {
      let time = new Date().getTime();
      let timeDiff = time - this.timeDelayTime;

      if (timeDiff < this.timeDelay) {
        return after({
          status: "error",
          message: "Please wait for " + ((this.timeDelay - timeDiff) / 1000 + 1).toFixed(0) + " seconds..."
        });
      } else {
        this.timeDelayTime = time;
        this.timeDelayCount = 0;
      }
    }

    const headers = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    const paramsList = [];
    for (let key in params) {
      paramsList.push(key + '=' + params[key]);
    }
    for (let key in this.args) {
      paramsList.push(key + '=' + this.args[key]);
    }

    const requestBody = paramsList.join('&');

    try {
      const response = await fetch(this.path, {
        method: 'POST',
        headers,
        body: requestBody
      });

      return response;
    } catch (error) {
      return after({
        status: "error",
        message: "An error occurred: " + error.message
      });
    }
  }

  async sendGet(theUrl) {
    try {
      const response = await fetch(theUrl);
      if (response.status === 200) {
        return response.text();
      } else {
        throw new Error(`HTTP Error: ${response.status}`);
      }
    } catch (error) {
      throw new Error("An error occurred: " + error.message);
    }
  }

  async upload(file, params, progress, load) {
    let formData = new FormData();
    formData.append("file", file);
    for (let key in params) {
      formData.append(key, params[key]);
    }
    for (let key in this.args) {
      formData.append(key, this.args[key]);
    }

    const xhr = new XMLHttpRequest();
    xhr.upload.onprogress = function (event) {
      progress(event);
    };
    xhr.onload = xhr.onerror = function () {
      load(this);
    };

    xhr.open('POST', this.path, true);
    xhr.send(formData);
  }

  getXmlHttp() {
    let xmlhttp;

    try {
      xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (e) {
      try {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
      } catch (E) {
        xmlhttp = false;
      }
    }
    if (!xmlhttp && typeof XMLHttpRequest !== 'undefined') {
      xmlhttp = new XMLHttpRequest();
    }
    return xmlhttp;
  }
}
