import { BuildField } from '../../modules/BuildField.js';
import { JsonArrConfig } from '../../modules/JsonArrConfig.js';
import { EditServerMods } from './EditServerMods.js';

export class EditServer {

	constructor(serversInstance) {
		this.serversInstance = serversInstance;

		// Инициализация полей формы
		this.formFields = serversInstance.formFields;

		// Данные, получаемые с сервера
		this.versions = [];
		this.javaVersions = [];
		this.serverPictures = [];

		this.buildField = new BuildField(this);

		this.jsonArrConfig = new JsonArrConfig(
			this,
			this.submitHandler.bind(this),
			this.buildField,
			{addRow: false, delRow: false}
		);
		this.editServerMods = new EditServerMods();
	}

	async submitHandler(button, serverName) {
		try {
			const answer = await this.jsonArrConfig.updateJsonConfig("updateServer");
			button.notify(answer.message, answer.type);

			if (answer.success) {
				setTimeout(() => {
					this.serversInstance.parseServers();
					foxEngine.servers.parseOnline();
					$('#dialog').dialog('close');
				}, 500);
			}
		} catch (error) {
			console.error('Ошибка при сохранении настроек сервера:', error.message);
		}
	}

	async loadAllOptions() {
		const [versions, javaVersions, serverPictures] = await Promise.all([
			this.parseAvailableVersions(),
			this.parseAvailableJava(),
			this.parseAvailablePictures(),
		]);

		this.versions = versions;
		this.javaVersions = javaVersions;
		this.serverPictures = serverPictures;
	}

	async parseAvailableVersions() {
		return await foxEngine.sendPostAndGetAnswer({ admPanel: 'getGameVersions' }, 'JSON');
	}

	async parseAvailableJava() {
		return await foxEngine.sendPostAndGetAnswer({ admPanel: 'getJavaVersions' }, 'JSON');
	}

	async parseAvailablePictures() {
		return await foxEngine.sendPostAndGetAnswer({ admPanel: 'getServerPictures' }, 'JSON');
	}

	updateFieldOptions() {
		const fieldOptionsMap = {
			serverVersion: this.versions,
			jreVersion: this.javaVersions,
			serverImage: this.serverPictures
		};

		this.formFields.forEach(field => {
			if (field.fieldName in fieldOptionsMap) {
				field.optionsArray = fieldOptionsMap[field.fieldName];
			}
		});
	}

	async getServerData(serverName) {
		const query = { admPanel: 'parseServers' };
		if (serverName?.trim()) {
			query.server = `serverName = '${serverName}'`;
		}
		return await foxEngine.sendPostAndGetAnswer(query, 'JSON');
	}

	async openEditWindow(serverName) {
		try {
			await this.loadAllOptions();
			const serverData = await this.getServerData(serverName);
			if (!serverData || !Array.isArray(serverData)) {
				console.error('Некорректные данные сервера:', serverData);
				return;
			}

			this.updateFieldOptions();
			this.jsonArrConfig.openForm(
				serverData,
				serverName,
				{ admPanel: "updateServer", serverName }
			);

			this.setupModsButton(serverData[0], serverName);
		} catch (error) {
			console.error('Ошибка при загрузке настроек сервера:', error.message);
		}
	}

	async openAddServerDialog() {
		try {
			await this.loadAllOptions();

			this.updateFieldOptions();

			const emptyData = {
				id: null,
				serverName: '',
				host: '',
				port: '',
				ignoreDirs: [],
				enabled: false,
				checkLib: false,
				serverGroups: [],
				serverDescription: '',
				serverVersion: '',
				jreVersion: '',
				serverImage: ''
			};

			this.jsonArrConfig.openForm(
				[emptyData],
				"new",
				{ admPanel: "updateServer" }
			);
		} catch (error) {
			console.error('Ошибка при открытии окна добавления сервера:', error.message);
		}
	}

	setupModsButton(serverData, serverName) {
		// Привязка кнопки "Моды"
		setTimeout(() => {
			$('#viewModsInfoBtn').off('click').on('click', () => {
				this.editServerMods.openModsInfo(serverData, serverName);
			});

			const $previewImage = $('#previewImage');
			const $dropdown = $('[name="serverImage"]');

			if ($dropdown.length && $previewImage.length) {
				$dropdown.off('change').on('change', (e) => {
					this.setImage(e.target.value, $previewImage);
				});

				this.setImage(serverData.serverImage || '', $previewImage);
			}
		}, 300);
	}

	setImage(imageUrl, $previewImage) {
		if (!($previewImage instanceof jQuery)) {
			$previewImage = $('#previewImage');
		}
		if (imageUrl) {
			$previewImage.attr('src', imageUrl).css('display', 'block');
		} else {
			$previewImage.attr('src', '').css('display', 'none');
		}
	}
}
